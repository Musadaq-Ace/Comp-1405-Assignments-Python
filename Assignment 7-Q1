from __future__ import division
import math
import sys
import pygame


class MyGame(object):
    def __init__(self):
        """Initialize a new game"""
        pygame.mixer.init()
        pygame.mixer.pre_init(44100, -16, 2, 2048)
        pygame.init()

        self.width = 800
        self.height = 600
        self.screen = pygame.display.set_mode((self.width, self.height))

        # use a black background
        self.bg_color = 255,255,255

        # Setup a timer to refresh the display FPS times per second
        self.FPS = 120
        self.REFRESH = pygame.USEREVENT+1
        pygame.time.set_timer(self.REFRESH, 1000//self.FPS)
        

    def run(self):
        """Loop forever processing events"""
        running = True
        
        images_scale = 0.5
        
        
        self.ball_image = pygame.image.load("Blueball.png")
        self.target_image = pygame.image.load("ball.png")
        
        
        ball_radius = self.ball_image.get_width()/2*images_scale
        
        ball_pos_x = 200
        ball_pos_y = 200
        
        max_ball_pos_x = self.width - ball_radius
        max_ball_pos_y = self.height - ball_radius
        
        target_pos_x = 500
        target_pos_y = 500
        
        
        accel_rate = 10.0/16.0
        ball_velocity_scalar = 0.9**(1.0/4.0)
        
        ball_accel_x = 0.0
        ball_accel_y = 0.0
        
        ball_velocity_x = 0.0
        ball_velocity_y = 0.0
        
        ball_max_vel = 2.0
        
        ball_magnitude = 0.0
        
        ball_angle = 0.0
        target_angle = 0.0
        
        ball_sideways_velocity_x = 0.0
        ball_sideways_velocity_y = 0.0
        
        sideways_ball_angle = 0.0
        velocity_angle = 0.0
        
        
        rad_to_deg = 180/3.14159265
        two_pi = 2*3.14159265
        pi_over_two = 3.141592653/2
         
        #sprite scale down
        ball_scaled = pygame.transform.scale(self.ball_image,(int(self.ball_image.get_width()*images_scale),int(self.ball_image.get_height()*images_scale)))
        target_scaled = pygame.transform.scale(self.target_image,(int(self.target_image.get_width()*images_scale),int(self.target_image.get_height()*images_scale)))
        
        bg_colour = [0,0,0]
                      
        at_destination = False
                       
        while running:
            event = pygame.event.wait()

            # player is asking to quit
            if event.type == pygame.QUIT:
                running = False

            # time to draw a new frame
            elif event.type == self.REFRESH:
                self.screen.fill(bg_colour)
                mouse_pos = pygame.mouse.get_pos()
                mouse_buttons_pressed = pygame.mouse.get_pressed()
                 

                target_pos_x = mouse_pos[0]
                target_pos_y = mouse_pos[1]
                
                
                dif_x = ball_pos_x-target_pos_x
                dif_y = ball_pos_y-target_pos_y
                dist = math.sqrt((dif_x**2.0)+(dif_y**2.0))
                if dist > 0: 
                    angle_radians = math.atan2(-dif_y,dif_x) 
                    angle_radians = (angle_radians - pi_over_two) % two_pi 
                    angle_degrees = angle_radians * rad_to_deg
                

                
                # calculations for image:
                ball_accel_x = accel_rate * math.sin(angle_radians)
                ball_accel_y = accel_rate * math.cos(angle_radians)
                

                
                # updates velocity:
                ball_velocity_x = ball_velocity_x*ball_velocity_scalar + ball_accel_x
                ball_velocity_y = ball_velocity_y*ball_velocity_scalar + ball_accel_y
                

                ball_magnitude = math.sqrt(ball_velocity_x**2.0 + ball_velocity_y**2.0)
                velocity_angle = math.atan2(-ball_velocity_y, ball_velocity_x)
                sideways_ball_angle = (angle_radians - pi_over_two)
                
                ball_sideways_velocity_magnitude = ball_magnitude * math.sin(velocity_angle - sideways_ball_angle)
               
                
                # apply velocity
                ball_pos_x += ball_velocity_x
                ball_pos_y += ball_velocity_y
                                
                # calculate renders:
                self.ball_image_render = pygame.transform.rotate(ball_scaled, angle_degrees)
                
                ball_new_pos_x =  ball_pos_x - (self.ball_image_render.get_width()/2)
                ball_new_pos_y =  ball_pos_y - (self.ball_image_render.get_height()/2)
                                
                self.screen.blit(self.ball_image_render,(ball_new_pos_x,ball_new_pos_y))


                    
                pygame.display.flip()
                #self.draw()

            else:
                pass # an event type we don't handle            

    def draw(self):
        """Update the display"""
        # everything we draw now is to a buffer that is not displayed
        self.screen.fill(self.bg_color)

        # flip buffers so that everything we have drawn gets displayed
        pygame.display.flip()


MyGame().run()
pygame.quit()
sys.exit()
