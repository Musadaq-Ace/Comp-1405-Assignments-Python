from __future__ import division
import math
import sys
import pygame


class MyGame(object):
    def __init__(self):
        """Initialize a new game"""
        pygame.mixer.init()
        pygame.mixer.pre_init(44100, -16, 2, 2048)
        pygame.init()

        self.width = 800
        self.height = 600
        self.screen = pygame.display.set_mode((self.width, self.height))

        # use a black background
        self.bg_color = 255,255,255

        # Setup a timer to refresh the display FPS times per second
        self.FPS = 120
        self.REFRESH = pygame.USEREVENT+1
        pygame.time.set_timer(self.REFRESH, 1000//self.FPS)
        

    def run(self):
        """Loop forever processing events"""
        running = True
        
        images_scale = 0.5
        
        
        ball_image = pygame.image.load("Blueball.png")
        dog_image = pygame.image.load("dog.png")
        
        
        ball_radius = ball_image.get_width()/2*images_scale
        
        ball_pos_x = 200
        ball_pos_y = 200
        
        max_ball_pos_x = self.width - ball_radius
        max_ball_pos_y = self.height - ball_radius
        
        target_pos_x = 500
        target_pos_y = 500
        
        dog_pos_x = 100
        dog_pos_y = 100
        
        accel_rate = 10.0/16.0
        ball_velocity_scalar = 0.9**(1.0/4.0)
        
        dog_accel_rate = 10.0/16.0
        dog_velocity_scalar = 0.8**(1.0/4.0)
                
        dog_velocity_x = 0.0
        dog_velocity_y = 0.0
        
        ball_velocity_x = 0.0
        ball_velocity_y = 0.0
               
        ball_magnitude = 0.0
        
        dog_angle = 0.0
        ball_angle = 0.0
        target_angle = 0.0
        
        ball_sideways_velocity_x = 0.0
        ball_sideways_velocity_y = 0.0
        
        sideways_ball_angle = 0.0
        velocity_angle = 0.0
              
        rad_to_deg = 180/3.14159265
        two_pi = 2*3.14159265
        pi_over_two = 3.141592653/2
        
        hit_dist = ball_image.get_width()*images_scale
        
        game_over_times = 0
        ball_life = False
        ball_life_counter = 0.0
        ball_life_time = 5.0
        ball_life_time_increment = ball_life_time/self.FPS/2
        
        render_ball = True
        ball_life_blink_time = 0.100
        ball_life_blink_timer = 0.0     
        
        #initial sprite scaledown:
        ball_scaled = pygame.transform.scale(ball_image,(int(ball_image.get_width()*images_scale),int(ball_image.get_height()*images_scale)))
        dog_scaled = pygame.transform.scale(dog_image,(int(dog_image.get_width()*images_scale),int(dog_image.get_height()*images_scale)))       

        bg_colour = [0,0,0]
        
        while running:
            event = pygame.event.wait()

            # player is asking to quit
            if event.type == pygame.QUIT:
                running = False

            # time to draw a new frame
            elif event.type == self.REFRESH:
                self.screen.fill(bg_colour)
                mouse_pos = pygame.mouse.get_pos()
                mouse_buttons_pressed = pygame.mouse.get_pressed()

                target_pos_x = mouse_pos[0]
                target_pos_y = mouse_pos[1]
               
                dif_x = ball_pos_x-target_pos_x
                dif_y = ball_pos_y-target_pos_y
                dog_dif_x = dog_pos_x - ball_pos_x
                dog_dif_y = dog_pos_y - ball_pos_y
                dist = math.sqrt((dif_x**2.0)+(dif_y**2.0))
                dog_dist = math.sqrt((dog_dif_x**2.0)+(dog_dif_y**2.0))
                if dist > 0: 
                    angle_radians = math.atan2(-dif_y,dif_x) 
                    angle_radians = (angle_radians - pi_over_two) % two_pi 
                    angle_degrees = angle_radians * rad_to_deg
                    dog_angle_radians = math.atan2(-dog_dif_y,dog_dif_x) 
                    dog_angle_radians = (dog_angle_radians - pi_over_two) % two_pi 
                    dog_angle_degrees = dog_angle_radians * rad_to_deg
                
                #check for hits and apply gameover:
                if ball_life == False:
                    if math.fabs(dog_dist) < hit_dist:
                        game_over_times += 1
                        ball_life_counter = 0.0
                        ball_life = True
                else:
                    ball_life_counter += ball_life_time_increment
                    if ball_life_counter >= ball_life_time:
                        ball_life_counter = 0.0
                        ball_life = False
               
                # Now we can do the calculations for the movement of the ball:
                ball_accel_x = accel_rate * math.sin(angle_radians)
                ball_accel_y = accel_rate * math.cos(angle_radians)
                
                dog_accel_x = dog_accel_rate * math.sin(dog_angle_radians)
                dog_accel_y = dog_accel_rate * math.cos(dog_angle_radians)
               
                # make changes to velocity:
                ball_velocity_x = ball_velocity_x*ball_velocity_scalar + ball_accel_x
                ball_velocity_y = ball_velocity_y*ball_velocity_scalar + ball_accel_y
                
                dog_velocity_x = dog_velocity_x*dog_velocity_scalar + dog_accel_x
                dog_velocity_y = dog_velocity_y*dog_velocity_scalar + dog_accel_y
                

                ball_magnitude = math.sqrt(ball_velocity_x**2.0 + ball_velocity_y**2.0)
                velocity_angle = math.atan2(-ball_velocity_y, ball_velocity_x)
                sideways_ball_angle = (angle_radians - pi_over_two)
                
                ball_sideways_velocity_magnitude = ball_magnitude * math.sin(velocity_angle - sideways_ball_angle)
                

                
                # add linear propulsion:
                ball_forwards_velocity_magnitude = ball_magnitude * math.sin(velocity_angle - angle_radians)
                
                ball_forwards_velocity_x = -ball_forwards_velocity_magnitude * math.sin(angle_radians)
                ball_forwards_velocity_y = -ball_forwards_velocity_magnitude * math.cos(angle_radians)
                                
                # apply velocity
                ball_pos_x += ball_velocity_x
                ball_pos_y += ball_velocity_y
                
                dog_pos_x += dog_velocity_x
                dog_pos_y += dog_velocity_y
                
                
                # calculate renders:
                ball_image_render = pygame.transform.rotate(ball_scaled, angle_degrees)
                dog_image_render = pygame.transform.rotate(dog_scaled, dog_angle_degrees)
                
                ball_new_pos_x =  ball_pos_x - (ball_image_render.get_width()/2)
                ball_new_pos_y =  ball_pos_y - (ball_image_render.get_height()/2)
                
                dog_new_pos_x = dog_pos_x - (dog_image_render.get_width()/2)
                dog_new_pos_y = dog_pos_y - (dog_image_render.get_height()/2)
                
                if ball_life == True:
                    ball_life_blink_timer += ball_life_time_increment
                    if ball_life_blink_timer >= ball_life_blink_time:
                        render_ball = (not render_ball)
                        ball_life_blink_timer = 0
                        
                else:
                    render_ball = True
                if render_ball:
                    self.screen.blit(ball_image_render,(ball_new_pos_x,ball_new_pos_y))
                self.screen.blit(dog_image_render,(dog_new_pos_x,dog_new_pos_y))
                
                pygame.display.flip()
                #self.draw()

            else:
                pass # an event type we don't handle            

    def draw(self):
        """Update the display"""
        # everything we draw now is to a buffer that is not displayed
        self.screen.fill(self.bg_color)

        # flip buffers so that everything we have drawn gets displayed
        pygame.display.flip()


MyGame().run()
pygame.quit()
sys.exit()

